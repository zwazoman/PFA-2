#ifndef NATHAN
#define NATHAN

#include HLSLSupport.cginc
#include UnityShadowLibrary.cginc


inline fixed unitySampleShadow (unityShadowCoord4 shadowCoord)
{
    #if defined(SHADOWS_NATIVE)
        fixed shadow = UNITY_SAMPLE_SHADOW(_ShadowMapTexture, shadowCoord.xyz);
        shadow = _LightShadowData.r + shadow  (1-_LightShadowData.r);
        return shadow;
    #else
        unityShadowCoord dist = SAMPLE_DEPTH_TEXTURE(_ShadowMapTexture, shadowCoord.xy);
         tegra is confused if we useÂ _LightShadowData.x directly
         with ambiguous overloaded function reference max(mediump float, float)
        unityShadowCoord lightShadowDataX = _LightShadowData.x;
        unityShadowCoord threshold = shadowCoord.z;
        return max(dist  threshold, lightShadowDataX);
    #endif
    
}

float invLerp(float from, float to, float value){
  return (value - from) / (to - from);
}

float remap(float origFrom, float origTo, float targetFrom, float targetTo, float value){
  float rel = invLerp(origFrom, origTo, value);
  return lerp(targetFrom, targetTo, rel);
}
 
float3 hueShift( float3 color, float hueAdjust ){

    const float3  kRGBToYPrime = float3 (0.299, 0.587, 0.114);
    const float3  kRGBToI      = float3 (0.596, -0.275, -0.321);
    const float3  kRGBToQ      = float3 (0.212, -0.523, 0.311);

    const float3  kYIQToR     = float3 (1.0, 0.956, 0.621);
    const float3  kYIQToG     = float3 (1.0, -0.272, -0.647);
    const float3  kYIQToB     = float3 (1.0, -1.107, 1.704);

    float   YPrime  = dot (color, kRGBToYPrime);
    float   I       = dot (color, kRGBToI);
    float   Q       = dot (color, kRGBToQ);
    float   hue     = atan (Q, I);
    float   chroma  = sqrt (I * I + Q * Q);

    hue += hueAdjust;

    Q = chroma * sin (hue);
    I = chroma * cos (hue);

    float3    yIQ   = float3 (YPrime, I, Q);

    return float3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );

}