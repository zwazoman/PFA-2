// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Source;
int OutlinePixelSize;
float4 OutlineColor;
float ExposureMultiplier;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    float4 r = Source[id.xy];
    
    
    //alpha clipping
    r.w = r.w>0;

    float outline = 0;
    int steps = 16;
    for(int i = 0; i<steps ; i++)
    {
        float angle = i*3.14/steps;
        float2 o = float2(cos(angle),sin(angle))*OutlinePixelSize;
        float a = Source[id.xy + int2(o.x,o.y)].w;
        float b = Source[id.xy - int2(o.x,o.y)].w;
        outline = max(outline,abs(a-b));
    }


    //outline
    // float a = Source[id.xy + int2(OutlinePixelSize,0)].w;
    // float b = Source[id.xy - int2(OutlinePixelSize,0)].w;
    // float c = Source[id.xy + int2(0,OutlinePixelSize)].w;
    // float d = Source[id.xy - int2(0,OutlinePixelSize)].w;
    // float outline = max(abs(a-b),abs(c-d));
     
    r*= ExposureMultiplier;

    r = lerp(r, float4(OutlineColor.xyz * (outline>0),0),saturate(1-saturate(r.w)*100000000));

    r.w = (max(r.w,outline)>0)*10000;
    
     //color correction
     

    Result[id.xy] = r;
}
